// thanks to ljharb:#node.js@freenode
/*function getConnection() {
	return new Promise(
			function (resolve, reject) {
				orm.connect(CONFIG.CONNECTION_STRING, function (error, db) {
					if (error) { reject(error); }
					else { resolve(db); } }
				);
			})
}
function checkExisting(objs) {
	return getConnection()
		   .then(function (db) {
				return new Promise(
					   	function (resolve, reject) {
							db.omodel.find(â€¦),
							function (error, result) {
								if (error) {
									reject(error);
								} else {
									resolve(result);
								}
							}
						}
				);
			});
}
checkExisting(objs).then(function (result) {
	
}).catch(function (error) {
	
});*/

function getConnection() {
	return new Promise(
			function (resolve, reject) {
				orm.connect(CONFIG.CONNECTION_STRING, function (error, db) {
					if (error) {
						reject(error);
					} else {
						resolve(db);
					}
				});
			})
}

function Check(objs) {
	getConnection().then(function (db) {
		function checkExisting(obj) {
			var _resolve, _reject;
			function cb1(error, result) {
				if (error) {
					_reject(error);
				} else {
					var res = null;
					if (result.length == 0) {
						res = obj;
					}
					_resolve(res);
				}
			}
			
			function cb2(resolve, reject) {
				_resolve = resolve; _reject = reject;
				var Ticker = new Definitions.Tickers(db, CONFIG.DB_TABLE_1);
				var o = clone(obj); delete o['id']
				Ticker.find(o, cb1);
			}
			return new Promise(cb2);
		}
		Promise.all(objs.map(checkExisting)).done(function (result) {
			db.close();
			result = result.filter(function(n) { return n !== null; });
			if (result.length > 0) {
				App.SaveStock(result);
			} else {
			    console.log('No new records to write.');
			}
		});
	});
}